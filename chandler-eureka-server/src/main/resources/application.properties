#spring.application.name=eureka-server
eureka.instance.appname=eureka-server
eureka.instance.virtualHostName=eureka-server
eureka.instance.secureVirtualHostName=eureka-server

server.port=8888
#将自己注册到eureka注册中心，单节点关闭 
eureka.client.registerWithEureka=true
#从注册中心获取注册信息，单节点关闭 
eureka.client.fetchRegistry=true
#从注册中心获取注册信息的时间间隔
eureka.client.registryFetchIntervalSeconds=10
#非安全通信端口
#eureka.instance.nonSecurePort=80
#是否启用非安全端口接受请求
#eureka.instance.nonSecurePortEnabled=true
#安全通信端口
#eureka.instance.securePort=443
#是否启用安全端口接受请求
#eureka.instance.securePortEnabled=true
#是否优先使用IP地址作为主机名的标识，默认false
#eureka.instance.preferIpAddress=false
#eureka节点定时续约时间，默认30
eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka节点剔除时间，默认90
eureka.instance.leaseExpirationDurationInSeconds=45
eureka.instance.instance-id=${spring.cloud.client.ip-address}:eureka-server-peer:${server.port}
#注册到另外两个节点，实现集群
eureka.client.serviceUrl.defaultZone=http://localhost:8887/eureka/,http://localhost:8888/eureka/,http://localhost:8889/eureka/
#单节点部署，自己注册自己
#eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
#关闭eureka自我保护机制
eureka.server.enable-self-preservation=false
#eureka定期扫描节点的时间
eureka.server.eviction-interval-timer-in-ms=1000   


# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=19
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=2048
# 是否分配的直接内存
server.undertow.direct-buffers=true
#最大分区数量
server.undertow.max-regions=10
#socket-binding="http"，保持长连接
server.undertow.always-set-keep-alive=true

